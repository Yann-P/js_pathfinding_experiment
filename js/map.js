// Generated by CoffeeScript 1.3.3
(function() {

  define(['astar', 'utils'], function(AStar, Utils) {
    var Map;
    return Map = (function() {

      function Map() {
        var _this = this;
        this.blankGrid = [];
        this.generateBlankGrid();
        this.blocking = null;
        setInterval(function() {
          var x, y, _i, _results;
          Utils.removeDebugEntities('permissions');
          _results = [];
          for (x = _i = 0; _i < 29; x = ++_i) {
            _results.push((function() {
              var _j, _results1;
              _results1 = [];
              for (y = _j = 0; _j < 18; y = ++_j) {
                if (this.isTileBlocking(x, y)) {
                  _results1.push(Utils.createDebugEntity(x, y, 'red', -1, 'permissions'));
                } else {
                  _results1.push(void 0);
                }
              }
              return _results1;
            }).call(_this));
          }
          return _results;
        }, 40);
      }

      Map.prototype.generateBlankGrid = function() {
        var x, y, _i, _results;
        _results = [];
        for (y = _i = 0; _i < 18; y = ++_i) {
          this.blankGrid[y] = [];
          _results.push((function() {
            var _j, _results1;
            _results1 = [];
            for (x = _j = 0; _j < 29; x = ++_j) {
              _results1.push(this.blankGrid[y][x] = 0);
            }
            return _results1;
          }).call(this));
        }
        return _results;
      };

      Map.prototype.setBlockingGrid = function(grid) {
        return this.blocking = grid;
      };

      Map.prototype.getFreeTiles = function() {
        var freeTiles, x, y, _i, _j;
        freeTiles = [];
        for (x = _i = 0; _i < 29; x = ++_i) {
          for (y = _j = 0; _j < 18; y = ++_j) {
            freeTiles.push([x, y]);
          }
        }
        return freeTiles;
      };

      Map.prototype.getNearestFreeTile = function(x, y) {
        var defaultPos, dir, i, j, length, _i;
        defaultPos = [x, y];
        length = 1;
        i = 0;
        while (1) {
          for (j = _i = 0; 0 <= length ? _i < length : _i > length; j = 0 <= length ? ++_i : --_i) {
            dir = [[1, 0], [0, -1], [-1, 0], [0, 1]][i % 4];
            x += dir[0];
            y += dir[1];
            if (!this.isTileOut(x, y) && !this.isTileBlocking(x, y)) {
              return [x, y];
            }
          }
          i++;
          if (i % 2 === 0) {
            length++;
          }
          if (length > 29) {
            return defaultPos;
          }
        }
      };

      Map.prototype.isTileOut = function(x, y) {
        return !(x >= 0 && x < 29 && y >= 0 && y < 18);
      };

      Map.prototype.isTileBlocking = function(x, y) {
        return this.blocking[y] && this.blocking[y][x] === 1;
      };

      Map.prototype.isTileFree = function(x, y) {
        return !this.isTileOut(x, y) && !this.isTileBlocking(x, y);
      };

      Map.prototype.addBlockingItem = function(x, y, width, height) {
        var i, j, _i, _ref, _results;
        if (width == null) {
          width = 1;
        }
        if (height == null) {
          height = 1;
        }
        _results = [];
        for (i = _i = x, _ref = x + width; x <= _ref ? _i < _ref : _i > _ref; i = x <= _ref ? ++_i : --_i) {
          _results.push((function() {
            var _j, _ref1, _results1;
            _results1 = [];
            for (j = _j = y, _ref1 = y + height; y <= _ref1 ? _j < _ref1 : _j > _ref1; j = y <= _ref1 ? ++_j : --_j) {
              _results1.push(this.blocking[j][i] = 1);
            }
            return _results1;
          }).call(this));
        }
        return _results;
      };

      Map.prototype.removeBlockingItem = function(x, y, width, height) {
        var i, j, _i, _ref, _results;
        if (width == null) {
          width = 1;
        }
        if (height == null) {
          height = 1;
        }
        _results = [];
        for (i = _i = x, _ref = x + width; x <= _ref ? _i < _ref : _i > _ref; i = x <= _ref ? ++_i : --_i) {
          _results.push((function() {
            var _j, _ref1, _results1;
            _results1 = [];
            for (j = _j = y, _ref1 = y + height; y <= _ref1 ? _j < _ref1 : _j > _ref1; j = y <= _ref1 ? ++_j : --_j) {
              _results1.push(this.blocking[j][i] = 0);
            }
            return _results1;
          }).call(this));
        }
        return _results;
      };

      Map.prototype.getDistance = function(start, goal) {
        return this.findPath(start, goal).length;
      };

      Map.prototype.findPath = function(start, goal, grid) {
        if (grid == null) {
          grid = this.blocking;
        }
        return AStar(grid, start, goal, "Manhattan");
      };

      Map.prototype.findIncompletePath = function(start, goal) {
        var i, incompletePath, perfectPath, step, _i, _ref;
        perfectPath = this.findPath(start, goal, this.blankGrid);
        incompletePath = [];
        console.log("perfectpath:");
        console.log(JSON.stringify(perfectPath));
        for (i = _i = 0, _ref = perfectPath.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
          step = perfectPath[i];
          if (this.isTileBlocking(step[0], step[1]) && i !== 0) {
            console.log("troubleshoot final, return incompletePath : ");
            console.log(JSON.stringify(incompletePath));
            return incompletePath;
          } else {
            incompletePath.push(JSON.parse(JSON.stringify(step)));
            console.log("troubleshoot initial : ");
            console.log(JSON.stringify(incompletePath));
          }
        }
        return incompletePath;
      };

      return Map;

    })();
  });

}).call(this);
