// Generated by CoffeeScript 1.3.3
(function() {

  define(['jquery', 'data', 'sprite', 'animation', 'character'], function($, Data, Sprite, Animation, Character) {
    var Entity;
    return Entity = (function() {

      function Entity(id, kind) {
        this.id = id;
        this.kind = kind;
        this.x = this.y = 0;
        this.offsetX = this.offsetY = 0;
        this.elt = null;
        this.sprite = null;
        this.currentAnimation = null;
        this.sprite = new Sprite(this.kind, this);
        this.animations = this.sprite.createAnimations();
        this.createElt();
      }

      Entity.prototype.createElt = function() {
        var elt;
        elt = document.createElement('div');
        $(elt).addClass('entity').appendTo('#game').css({
          width: this.sprite.frameWidth,
          height: this.sprite.frameHeight
        });
        return this.elt = elt;
      };

      Entity.prototype.setBackground = function(imagepath, x, y) {
        this.elt.style.backgroundImage = "url('resources/img/sprites/" + imagepath + "')";
        return this.elt.style.backgroundPosition = (-x) + 'px ' + (-y) + 'px';
      };

      Entity.prototype.setPosition = function(x, y) {
        this.x = x;
        this.y = y;
        this.elt.style.left = (x * 32) - this.offsetX + 'px';
        return this.elt.style.top = (y * 32) - this.offsetY + 'px';
      };

      Entity.prototype.setOffset = function(left, top) {
        this.offsetX = left;
        return this.offsetY = top;
      };

      Entity.prototype.setAnimation = function(animationid, nbLoops, callback) {
        var animation;
        if (this.currentAnimation && this.currentAnimation.name === animationid) {
          return;
        }
        animation = this.animations[animationid] || (function() {
          throw "Cette entit√© n'a pas d'animation " + animationid;
        })();
        if (this.currentAnimation) {
          this.currentAnimation.stop();
        }
        this.currentAnimation = animation;
        return this.currentAnimation.start(nbLoops, callback);
      };

      Entity.prototype.clearAnimation = function() {
        if (this.currentAnimation) {
          return this.currentAnimation.stop();
        }
      };

      Entity.prototype.remove = function() {
        console.log("Remove entity");
        this.clearAnimation();
        return document.getElementById('game').removeChild(this.elt);
      };

      return Entity;

    })();
  });

}).call(this);
