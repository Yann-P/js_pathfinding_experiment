// Generated by CoffeeScript 1.3.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['lib/jquery', 'data', 'types', 'entity'], function($, Data, Types, Entity) {
    var Character;
    Character = (function(_super) {

      __extends(Character, _super);

      function Character(id, kind) {
        Character.__super__.constructor.call(this, id, kind);
        this.moveStack = [];
        this.orientation = Types.Directions.DOWN;
      }

      Character.prototype.setMoveStack = function(moveStack) {
        this.moveStack = moveStack;
        return this.nextMove();
      };

      Character.prototype.nextMove = function() {
        var dest, direction, source,
          _this = this;
        if (!(this.moveStack.length > 1)) {
          return;
        }
        source = this.moveStack[0];
        dest = this.moveStack[1];
        direction = null;
        console.log(source);
        if (source[0] !== this.x || source[1] !== this.y) {
          throw "Source isn't current character position";
        }
        if (Math.abs(source[0] - dest[0]) + Math.abs(source[1] - dest[1]) > 1) {
          throw "There must be exactly one coordinate change between source and dest";
        }
        if (source[0] - dest[0] === -1) {
          direction = Types.Directions.RIGHT;
        } else if (source[0] - dest[0] === 1) {
          direction = Types.Directions.LEFT;
        } else if (source[1] - dest[1] === -1) {
          direction = Types.Directions.DOWN;
        } else if (source[1] - dest[1] === 1) {
          direction = Types.Directions.UP;
        } else {
          throw "Impossible move";
        }
        this.moveTowards(direction, function() {
          return _this.nextMove();
        });
        return this.moveStack.splice(0, 1);
      };

      Character.prototype.moveTowards = function(direction, callback) {
        var pos,
          _this = this;
        pos = {
          x: this.x,
          y: this.y
        };
        switch (direction) {
          case Types.Directions.LEFT:
            pos.x--;
            break;
          case Types.Directions.RIGHT:
            pos.x++;
            break;
          case Types.Directions.UP:
            pos.y--;
            break;
          case Types.Directions.DOWN:
            pos.y++;
        }
        this.sprite.setAnimation("move_" + direction);
        this.orientation = direction;
        return this.moveElt(pos.x, pos.y, function() {
          _this.sprite.setAnimation("idle_" + direction);
          return callback();
        });
      };

      return Character;

    })(Entity);
    return Character;
  });

}).call(this);
