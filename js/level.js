// Generated by CoffeeScript 1.3.3
(function() {

  define(['lib/jquery', 'lib/astar', 'data', 'utils', 'zombie', 'wave'], function($, AStar, Data, Utils, Zombie, Wave) {
    var Level;
    return Level = (function() {

      function Level(id, app) {
        this.id = id;
        this.app = app;
        this.entityCount = 0;
        this.entities = {};
        this.currentWaveId = 0;
        this.waves = [];
        this.setup();
      }

      Level.prototype.setup = function() {
        var data;
        data = Data.store.levels[this.id];
        this.name = data.name, this.gold = data.gold, this.blocking = data.blocking;
        this.background = "resources/img/maps/" + this.name + ".png";
        this.wavesData = data.waves;
        this.loadMap();
        this.addWaves();
        return this.nextWave();
      };

      Level.prototype.addWaves = function() {
        var id, wave, waveData, _i, _len, _ref, _results;
        _ref = this.wavesData;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          waveData = _ref[_i];
          id = this.waves.length;
          wave = new Wave(id, waveData.zombies, waveData.interval, waveData.next, this);
          _results.push(this.waves[id] = wave);
        }
        return _results;
      };

      Level.prototype.nextWave = function() {
        var _this = this;
        this.waves[this.currentWaveId].start(function() {
          if (_this.currentWaveId < _this.waves.length) {
            return _this.nextWave();
          } else {
            return console.log("Toutes vagues envoyées");
          }
        });
        return this.currentWaveId++;
      };

      Level.prototype.addZombie = function(x, y, kind) {
        var id, zombie;
        id = this.entityCount++;
        zombie = new Zombie(id, kind);
        zombie.setPosition(x, y);
        this.addCharacterCallback(zombie);
        return zombie;
      };

      Level.prototype.addCharacterCallback = function(character) {
        var _this = this;
        this.entities[character.id] = character;
        character.enableSmoothMvmt();
        character.onRequestedPath(function(x, y) {
          return _this.findPath(character, x, y);
        });
        return character.onDeath(function() {
          character.remove();
          return delete _this.entities[character.id];
        });
      };

      Level.prototype.findPath = function(character, x, y) {
        var path;
        path = AStar(this.blocking, [character.x, character.y], [x, y], "Manhattan");
        if (path.length === 0) {
          console.log("Le personnage #" + character.id + " de type " + character.kind + " n'a pas trouvé de chemin jusque (" + x + ", " + y + ")");
        }
        return path;
      };

      Level.prototype.loadMap = function() {
        return $('#game').css('backgroundImage', "url('" + this.background + "')");
      };

      return Level;

    })();
  });

}).call(this);
